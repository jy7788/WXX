<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans  
                        http://www.springframework.org/schema/beans/spring-beans-3.1.xsd  
                        http://www.springframework.org/schema/context  
                        http://www.springframework.org/schema/context/spring-context-3.1.xsd  
                        http://www.springframework.org/schema/mvc  
                        http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd">

	<context:property-placeholder location="classpath:/resource/*.properties" />
	<!-- 自动扫描该包，使SpringMVC认为包下用了@controller注解的类是控制器 -->
	<context:component-scan base-package="com.cn.hnust.controller" />
	<!--避免IE执行AJAX时，返回JSON出现下载文件 -->
	<bean id="mappingJacksonHttpMessageConverter"
		class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter">
		<property name="supportedMediaTypes">
			<list>
				<value>text/html;charset=UTF-8</value>
			</list>
		</property>
	</bean>
	<!-- 启动SpringMVC的注解功能，完成请求和注解POJO的映射 -->
	<bean
		class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
		<property name="messageConverters">
			<list>
				<ref bean="mappingJacksonHttpMessageConverter" />	<!-- JSON转换器 -->
			</list>
		</property>
	</bean>
	<!-- 定义跳转的文件的前后缀 ，视图模式配置 -->
	<bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<!-- 这里的配置我的理解是自动给后面action的方法return的字符串加上前缀和后缀，变成一个 可用的url地址 -->
		<property name="prefix" value="/WEB-INF/pages/" />
		<!-- <property name="suffix" value=".jsp" /> -->
	</bean>
	<!-- 配置文件上传，如果没有使用文件上传可以不用配置，当然如果不配，那么配置文件中也不必引入上传组件包 -->
	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<!-- 默认编码 -->
		<property name="defaultEncoding" value="utf-8" />
		<!-- 文件大小最大值 -->
		<property name="maxUploadSize" value="10485760000" />
		<!-- 内存中的最大值 -->
		<property name="maxInMemorySize" value="40960" />
	</bean>

	<bean id="scheduledJob" class="com.cn.hnust.quartz.RefreshAccessTokenTask">
	</bean>

	<bean id="refreshJsApiTicketJob" class="com.cn.hnust.quartz.RefreshJsApiTicketTask">
	</bean>

	<bean id="duplicateMessageJob" class="com.cn.hnust.quartz.ClearMessageTask">
	</bean>

	<bean id="scheduledJobDetail"
		class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject" ref="scheduledJob" />
		<property name="targetMethod" value="refreshToken" />
		<property name="concurrent" value="true" />
	</bean>

	<bean id="scheduledJobDetailJsApi"
		class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject" ref="refreshJsApiTicketJob" />
		<property name="targetMethod" value="refreshJsapiTicket" />
		<property name="concurrent" value="true" />
	</bean>

	<!-- <bean id="doTime" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean"> 
		<property name="jobDetail" ref="scheduledJobDetail" /> <property name="startDelay" 
		value="1000"></property> <property name="cronExpression"> <value>0 0 */1 
		* * ?</value> <value>0/30 * * * * ?</value> </property> </bean> -->
	<bean name="clearDuplicateMessageJobDetail"
		class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject" ref="duplicateMessageJob" />
		<property name="targetMethod" value="clearMessage" />
		<property name="concurrent" value="false" />
	</bean>

	<bean id="doTime"
		class="org.springframework.scheduling.quartz.SimpleTriggerFactoryBean">
		<property name="jobDetail" ref="scheduledJobDetail" />
		<property name="startDelay" value="500" />
		<property name="repeatInterval" value="6000000" />
		<property name="repeatCount" value="-1" />
	</bean>

	<bean id="doTimeJs"
		class="org.springframework.scheduling.quartz.SimpleTriggerFactoryBean">
		<property name="jobDetail" ref="scheduledJobDetailJsApi" />
		<property name="startDelay" value="8000" />
		<property name="repeatInterval" value="6000000" />
		<property name="repeatCount" value="-1" />
	</bean>

	<bean id="clearDuplicateMessageTrigger"
		class="org.springframework.scheduling.quartz.SimpleTriggerFactoryBean">
		<property name="jobDetail" ref="clearDuplicateMessageJobDetail" />
		<property name="repeatInterval" value="60000" />
		<property name="startDelay" value="60000" />
	</bean>

	<!-- 总管理类 如果将lazy-init='false'那么容器启动就会执行调度程序 -->
	<bean id="startQuertz" lazy-init="false" autowire="no"
		class="org.springframework.scheduling.quartz.SchedulerFactoryBean">

		<property name="jobDetails">
			<list>
				<ref bean="clearDuplicateMessageJobDetail" />
				<ref bean="scheduledJobDetail" />
				<ref bean="scheduledJobDetailJsApi" />
			</list>
		</property>
		<property name="triggers">
			<list>
				<ref bean="doTime" />
				<ref bean="doTimeJs" />
				<ref bean="clearDuplicateMessageTrigger" />
			</list>
		</property>
	</bean>

	<bean id="exceptionResolver"
		class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
		<property name="exceptionMappings">
			<props>
				<prop key="com.cn.hnust.exception.WXException">error</prop>
			</props>
		</property>
	</bean>

</beans>