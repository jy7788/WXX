<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.cn.hnust.model.sat.SatArticle" >
  <resultMap id="BaseResultMap" type="com.cn.hnust.model.sat.SatArticle" >
    <id column="id" property="id" jdbcType="VARCHAR" />
    <result column="title" property="title" jdbcType="VARCHAR" />
    <!-- <result column="open_id" property="openid" jdbcType="VARCHAR" /> -->
    <result column="stars" property="stars" jdbcType="INTEGER" />
    <result column="shares" property="shares" jdbcType="INTEGER" />
    <result column="watches" property="watches" jdbcType="INTEGER" />
    <!-- <result column="self_created" property="selfCreated" jdbcType="INTEGER" /> -->
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
    <result column="update_time" property="updateTime" jdbcType="TIMESTAMP" />
    <result column="url" property="url" jdbcType="VARCHAR" />
    <result column="desc_img_url" property="descImgUrl" jdbcType="VARCHAR" />
    <!-- <result column="type" property="type" jdbcType="INTEGER"/> -->
  </resultMap>
  
  <sql id="Base_Column_List" >
    id, title, stars, shares, watches, create_time, update_time, url, desc_img_url
  </sql>
  
  <insert id="add" parameterType="com.cn.hnust.model.sat.SatArticle">
		insert into t_sat_article 
		(id, title,  stars, shares, watches, create_time, update_time, url, desc_img_url)
		values
		(#{id}, #{title}, #{stars}, 
		 #{shares},   #{watches},    #{createTime}, #{updateTime}, #{url}, #{descImgUrl})
  </insert>
  
  <insert id="addContent" parameterType="com.cn.hnust.model.sat.SatArticle">
		insert into t_sat_article_content 
		( content, article_id)
		values
		( #{content} , #{articleId})
  </insert>
  
  <select id="listArticleSummary" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from t_sat_article
    where id = #{id,jdbcType=VARCHAR} 
    order by create_time desc
  </select>
  
  <select id="loadArticleContent" resultMap="BaseResultMap" parameterType="java.lang.String" >
    select 
     t1.content, t2.title, t2.id, t2.create_time, t2.stars, t2.shares, t2.watches, t2.desc_img_url
    from t_sat_article_content t1 join t_sat_article t2 on t1.article_id = t2.id   
    where t1.article_id = #{id,jdbcType=VARCHAR}
  </select>
  
  <select id="loadMyArticleContent" resultMap="BaseResultMap" parameterType="Map" >
    select 
     t1.content, t2.title, t2.id, t2.create_time, t2.stars, t2.shares, t2.watches, t2.desc_img_url
    from t_sat_article_content t1 join t_sat_article t2 on (t2.id = t1.article_id)
    where t2.id= #{articleId}
  </select>
  
  <select id="loadArticleById" resultMap="BaseResultMap" parameterType="java.lang.String" >
    select 
    <include refid="Base_Column_List" />
    from t_sat_article
    where id = #{id,jdbcType=VARCHAR}
  </select>
  <!-- 我的转发    -->  
  <select id="listBySatUserOpenId" resultMap="BaseResultMap" parameterType="Map" >
    select 
    	a.id, a.title, a.stars, a.shares, a.watches, a.create_time, a.update_time, a.url, a.desc_img_url 
    from t_sat_article a join t_sat_article_share s on (a.id = s.article_id)
    join t_sat_user u on (u.open_id = s.user_id) 
    where s.user_id = #{openid,jdbcType=VARCHAR}
  </select>
  
  <select id="listSatArticles" resultMap="BaseResultMap" parameterType="Map" >
    select 
    <include refid="Base_Column_List" />
    from t_sat_article
    order by create_time desc 
  </select>
  
  <select id="listNewsLike" resultMap="BaseResultMap" parameterType="Map" >
    select 
    <include refid="Base_Column_List" />
    from t_sat_article where title like #{content} and type = 1
    order by create_time desc 
  </select>
  
  <select id="listMyArticles" resultMap="BaseResultMap" parameterType="Map" >
    select 
    <include refid="Base_Column_List" />
    from t_sat_article 
    where id=#{id,jdbcType=VARCHAR} and open_id=#{openid,jdbcType=VARCHAR} and type != 1
    order by create_time desc 
  </select>
  
  <select id="loadMyArticle" resultMap="BaseResultMap" parameterType="Map" >
    select 
    <include refid="Base_Column_List" />
    from t_sat_article 
    where id=#{id,jdbcType=VARCHAR} and open_id=#{openid,jdbcType=VARCHAR} and type != 1
    order by create_time desc 
  </select>
  
  <delete id="deleteByUUID" parameterType="java.lang.String" >
    delete from t_sat_article
    where id = #{id,jdbcType=VARCHAR};
    
    delete from t_sat_article_content
    where id = #{id,jdbcType=VARCHAR};
  </delete>
  
  <delete id="deleteByIds" parameterType="Map" >
    delete from t_sat_article
    where id = #{id,jdbcType=VARCHAR} and open_id=#{openid,jdbcType=VARCHAR};
    
    delete from t_sat_article_content
    where id = #{id,jdbcType=VARCHAR} and open_id=#{openid,jdbcType=VARCHAR};
  </delete>
  
  <update id="update" parameterType="com.cn.hnust.model.sat.SatArticle" >
    update t_sat_article
    set title = #{title,jdbcType=VARCHAR},
      <!-- nickname = #{nickname,jdbcType=VARCHAR}, -->
      stars = #{stars,jdbcType=INTEGER},
      shares = #{shares,jdbcType=INTEGER},
      watches = #{watches,jdbcType=INTEGER},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      url = #{url,jdbcType=VARCHAR},
      desc_img_url = #{descImgUrl,jdbcType=VARCHAR}
    where id = #{id,jdbcType=VARCHAR} 
  </update>
  
  <select id="listArticlesByClassifyId" resultMap="BaseResultMap" parameterType="Map">
  	select 
  	a.id, a.title, a.stars, a.shares, a.watches, a.create_time, a.update_time, a.url, a.desc_img_url
  	from t_sat_article a 
  	left join t_sat_article_classify cf on (a.id = cf.article_id) 
  	left join t_sat_classify c on (cf.classify_id = c.id) 
  	where  c.id = #{classifyId} 
  </select>
  
  <select id="listArticlesByclassifyName" resultMap="BaseResultMap" parameterType="Map">
  	select 
  	a.id, a.title, a.stars, a.shares, a.watches, a.create_time, a.update_time, a.url, a.desc_img_url
  	from t_sat_article a 
  	left join t_sat_article_classify cf on (a.id = cf.article_id) 
  	left join t_sat_classify c on (cf.classify_id = c.id) 
  	where  c.classify_name = #{classifyName} 
  </select>
  
  <insert id="collectArticle"  parameterType="Map">
  	insert into t_sat_article_collection
  	(user_id, article_id) values (#{userId}, #{articleId} )
  </insert>
  
  <select id="listMyCollections" resultMap="BaseResultMap" parameterType="Map">
  	select 
  	a.id, a.title, a.stars, a.shares, a.watches, a.create_time, a.update_time, a.url, a.desc_img_url 
  	from t_sat_article a 
  	left join t_sat_article_collection c on (a.id = c.article_id)
  	where c.user_id = #{openid} 
  </select>
  
  <select id="listCollectArticles" resultMap="BaseResultMap" parameterType="Map">
  	select 
  	a.id, a.title, a.stars, a.shares, a.watches, a.create_time, a.update_time, a.url, a.desc_img_url 
  	from t_sat_article a 
  	left join t_sat_article_collection c on (a.id = c.article_id)
  	where c.user_id = #{openid} and c.article_id = #{articleId} 
  </select>
  
  <select id="listByTitle" resultMap="BaseResultMap" parameterType="Map">
  		select <include refid="Base_Column_List" />
  		from t_sat_article
		<where>
			<if test="title!= null">title like #{title}</if>
		</where>
		order by create_time desc
  </select>
  
  <delete id="deleteMyCollection" parameterType="Map">
  		delete from t_sat_article_collection 
  		where user_id=#{openid} and article_id=#{articleId}
  </delete>
  
  <delete id="deleteMyShare" parameterType="Map">
  		delete from t_sat_article_share 
  		where user_id=#{openid} and article_id=#{articleId}
  </delete>
  
  <!-- <insert id="insertNewShareArticle" parameterType="Map">
  		insert into t_sat_article_share
  		(id, user_id, article_id, advis_id, create_time, shares, stars, watches, advis_click_count)
  		values
  		(#{id}, #{openid}, )
  </insert> -->
  
</mapper>