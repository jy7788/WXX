<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.cn.hnust.model.pa.PAUser" >
  <resultMap id="BaseResultMap" type="com.cn.hnust.model.pa.PAUser" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="username" property="username" jdbcType="VARCHAR" />
    <result column="password" property="password" jdbcType="VARCHAR" />
    <result column="nickname" property="nickname" jdbcType="VARCHAR" />
    <result column="open_id" property="openid" jdbcType="VARCHAR" />
    <result column="phone_num" property="phoneNum" jdbcType="VARCHAR" />
    <result column="status" property="status" jdbcType="INTEGER" />
    <result column="sex" property="sex" jdbcType="INTEGER" />
    <result column="bind" property="bind" jdbcType="INTEGER" />
    <result column="img_url" property="imgUrl" jdbcType="VARCHAR" />
    <result column="area" property="area" jdbcType="VARCHAR" />
    <result column="position" property="position" jdbcType="VARCHAR" />
  </resultMap>
  
  <sql id="Base_Column_List" >
    id, username, password, nickname, open_id, status, sex, bind, img_url, phone_num, area, position, organization
  </sql>
  
  <insert id="add" parameterType="com.cn.hnust.model.pa.PAUser">
		insert into t_pa_user 
		(username, password,  open_id, status, sex, bind, img_url, phone_num, area, position, organization)
		values
		(#{username}, #{password}, #{openid}, 
		 #{status},   #{sex},      #{bind},     #{imgUrl}, #{phoneNum}, #{area}, #{position}, #{organization})
  </insert>
  
  <select id="load" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from t_pa_user
    where id = #{id,jdbcType=INTEGER}
  </select>
  
  <select id="loadByPAUserOpenId" resultMap="BaseResultMap" parameterType="java.lang.String" >
    select 
    <include refid="Base_Column_List" />
    from t_pa_user
    where open_id = #{openid,jdbcType=VARCHAR}
  </select>
  
  <select id="loadByUserName" resultMap="BaseResultMap" parameterType="java.lang.String" >
    select 
    <include refid="Base_Column_List" />
    from t_pa_user
    where username = #{username,jdbcType=VARCHAR}
  </select>
  
  <select id="loadByPhoneNum" resultMap="BaseResultMap" parameterType="java.lang.String" >
    select 
    <include refid="Base_Column_List" />
    from t_pa_user
    where phone_num = #{phoneNum,jdbcType=VARCHAR}
  </select>
  
  <delete id="delete" parameterType="java.lang.Integer" >
    delete from t_pa_user
    where id = #{id,jdbcType=INTEGER}
  </delete>
  
  <update id="update" parameterType="com.cn.hnust.model.pa.PAUser" >
    update t_pa_user
    set username = #{username,jdbcType=VARCHAR},
      password = #{password,jdbcType=VARCHAR},
      <!-- nickname = #{nickname,jdbcType=VARCHAR}, -->
      open_id = #{openid,jdbcType=VARCHAR},
      status = #{status,jdbcType=INTEGER},
      sex = #{sex,jdbcType=INTEGER},
      bind = #{bind,jdbcType=INTEGER},
      img_url = #{imgUrl,jdbcType=VARCHAR},
      area = #{area,jdbcType=VARCHAR},
      position = #{position,jdbcType=VARCHAR},
      organization = #{organization,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
  
  <select id="pAUserFindAll" resultMap="BaseResultMap" parameterType="Map">
		select * from t_pa_user
		<where>
			<if test="name!= null">username like #{name} or nickname like #{name}</if>
		</where>
		<if test="sort != null">order by ${sort} 
			<if test="order!= null">
				${order,jdbcType=VARCHAR}
			</if>
		</if>
		<if test="offSet != null"> 
		limit #{offSet,jdbcType=INTEGER}, #{pageSize,jdbcType=INTEGER}
		</if>
	</select>
	
  	<select id="pAUserFindOthers" resultMap="BaseResultMap" parameterType="string">
		select * from t_pa_user where open_id != #{openid} and bind = 1
	</select>
	
	<select id="pAUserFindBinded" resultMap="BaseResultMap" parameterType="string">
		select * from t_pa_user user 
			right join t_pa_user_request requester 
		on  requester.open_id = user.open_id 
		where 
			requester.requester_open_id = #{openid}  and requester.request_status = 2 
		<!-- select * from t_pa_user user where user.open_id in 
		(select requester.open_id from t_pa_user_request requester 
		where requester.requester_open_id  = #{open_id}
		and requester.request_status = 2)  -->
	</select>
	
	<select id="pAUserFindBindMe" resultMap="BaseResultMap" parameterType="string">
		select * from t_pa_user user 
			right join t_pa_user_request requester 
		on  requester.requester_open_id = user.open_id 
		where 
			requester.open_id = #{openid}  and requester.request_status = 2 
		<!-- select * from t_pa_user user where user.open_id in 
		(select requester.open_id from t_pa_user_request requester 
		where requester.requester_open_id  = #{open_id}
		and requester.request_status = 2)  -->
	</select>
	
	<select id="find_count" parameterType="map" resultType="int">
		select count(*) from t_pa_user 
		<if test="name !=null"> where (username like #{name} or nickname like #{name})</if>
	</select>
	
</mapper>